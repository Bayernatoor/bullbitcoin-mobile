#!/bin/bash


function main.git {
    if [ -z "$1" ]; then
        echo "No git command specified"
        exit 1
    fi

    case "$1" in
        commit)
            shift  # remove the first argument which is 'commit'
            commit.git "$@"
            ;;
        pull)
            pull.git
            ;;
        push)
            push.git
            ;;
        stash)
            shift  # remove the first argument which is 'stash'
            stash.git "$@"
            ;;
        release)
            shift  # remove the first argument which is 'release'
            release.git "$@"
            ;;
        issue)
            issue.git
            ;;
        pr)
            shift  # remove the first argument which is 'pr'
            pr.git "$@"
            ;;
        *)
            echo "Unknown git sub-command: $1"
            exit 1
            ;;
    esac
}

function commit.git {
    cd "$BBM_HOME" || exit 1;
    git add .
    git commit -S -m "$1"
    cd - > /dev/null 2>&1 || exit
}

function pull.git {
    cd "$BBM_HOME" || exit 1;
    git pull
    cd - > /dev/null 2>&1 || exit
}

function push.git {
    cd "$BBM_HOME" || exit 1;
    git push
    cd - > /dev/null 2>&1 || exit
}

function stash.git {
    cd "$BBM_HOME" || exit 1;
    git stash
    cd - > /dev/null 2>&1 || exit
}

function release.git {
    cd "$BBM_HOME" || exit 1;
    if [ -z "$1" ]; then
        err.log "Error: Please provide a version (eg: v0.1.2)"
        exit 1
    fi
    notice.log "Ensure that you are on main. Commited and built the latest version of the codebase."
    confirm.form

    version=$1
    zone_build=$BBM_OP_HOME/builds/$BBM.$version
    BBM_OWNER="SatoshiPortal"
    RELEASE_NOTES="$BBM_OP_HOME/config/release-notes.md"
    # keepassxc

    GITHUB_TOKEN=$(secret.form "Enter Your Github Token:")
    br.log
    # git tag -s "$version" -m "Release-$version"
    # git tag --verify "$version"
    # git push --tags origin
    # sed -i "s/--version--/$version/g" "$RELEASE_NOTES"
    win.log "Pushed with release tag!"
    notice.log "Release $version: Opening $RELEASE_NOTES in $EDITOR."
    confirm.form 
    
    nvim "$RELEASE_NOTES"
    # Markdown file containing release notes

    # Read the content of the Markdown file into a variable
    RELEASE_BODY=$(<"$RELEASE_NOTES")

    RELEASE_BODY_JSON=$(printf '%s' "$RELEASE_BODY" | jq -s -R .)
    cd - > /dev/null 2>&1 || exit

# Use a heredoc to provide the JSON data directly
    RELEASE_RESPONSE=$(curl -H "Authorization: token $GITHUB_TOKEN" -X POST "https://api.github.com/repos/$BBM_OWNER/$BBM/releases" -d @- <<EOF
{
    "tag_name": "$version",
    "target_commitish": "main",
    "name": "Release $version",
    "body": $RELEASE_BODY_JSON,
    "draft": false,
    "prerelease": true
}
EOF
)
    echo "$RELEASE_RESPONSE"
    # Extract the release ID from the response
    RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')

    # Upload the zip file as an asset
    ASSET_UPLOAD_RESPONSE=$(curl -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/zip" --data-binary @"$zone_build.zip" "https://uploads.github.com/repos/$BBM_OWNER/$BBM/releases/$RELEASE_ID/assets?name=bullbitcoin-mobile.$version.zip")

    echo "$ASSET_UPLOAD_RESPONSE"

}


function issue.git {    
    local issue_title
    issue_title=$(input.form "Provide a title for the issue:")
    local issue_description
    issue_description=$(input.form "Provide a description for the issue:")
    local issue_tags
    issue_tags=$(input.form "Add tags (comma separated, no spaces):")

    GITHUB_TOKEN=$(secret.form "Enter Your Github Token:")
    # Create an array of tags from the comma-separated input
    IFS=',' read -ra tags <<< "$issue_tags"
    declare -a json_tags=()
    for tag in "${tags[@]}"; do
        json_tags+=("{\"name\": \"$tag\"}")
    done

    json_tags_str=$(IFS=','; echo "${json_tags[*]}")

    # Use a heredoc to provide the JSON data directly
    ISSUE_RESPONSE=$(curl -H "Authorization: token $GITHUB_TOKEN" -X POST "https://api.github.com/repos/$BBM_OWNER/$BBM/issues" -d @- <<EOF
{
    "title": "$issue_title",
    "body": "$issue_description",
    "labels": [$json_tags_str]
}
EOF
)

    echo "$ISSUE_RESPONSE"
}



function pr.git {
    # This function will vary greatly depending on what "all the ops required to review and merge a PR" includes.
    # Here is a basic version that checks for conflicts, reviews, and potentially merges a PR.
    # More advanced functionality would likely require integrating with GitHub's API.

    local pr_number="$1"

    if [ -z "$pr_number" ]; then
        echo "Error: PR number is required."
        exit 1
    fi

    cd "$BBM_HOME" || exit 1;

    # Fetch the latest changes
    git fetch origin

    # Check out the PR using GitHub's refs/pull, needs the actual PR number
    git checkout "refs/pull/$pr_number/head" -b "pr-$pr_number"

    # Try to merge the PR to the main branch (change 'main' if your default branch is different)
    git checkout main
    git merge --no-ff --no-commit "pr-$pr_number"

    # Check for conflicts
    if git diff --name-only --diff-filter=U | grep .; then
        echo "There are conflicts in the following files:"
        git diff --name-only --diff-filter=U
        git merge --abort
    else
        echo "No conflicts detected. Ready to merge."
        # If no conflicts, complete the merge.
        git commit -m "Merge PR #$pr_number"
    fi

    cd - > /dev/null 2>&1 || exit
}