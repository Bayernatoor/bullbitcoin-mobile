#!/bin/bash

function main.release {
    if [ -z "$1" ]; then
        err.log "Error: Please provide a version (eg: v0.1.2)"
        exit 1
    fi
    version=$1

    display.repos
    repo_name=$(select.repos)

    zone_build=$BBM_OP_HOME/dev/$ZONE_NAME/builds/$repo_name.$version
    
    # keepassxc

    GITHUB_TOKEN=$(secret.form "Enter Your Github Token:")
    br.log
    REPO_OWNER="SatoshiPortal"
    RELEASE_NOTES="$zone_build/package.md"
    cp "$BBM_OP_HOME/mgmt/$repo_name/package.md" "$RELEASE_NOTES"
    sed -i "s/--version--/$version/g" "$RELEASE_NOTES"

    notice.log "Opening $RELEASE_NOTES in $EDITOR."
    confirm.form 
    
    nvim "$RELEASE_NOTES"
    # Markdown file containing release notes

    # Read the content of the Markdown file into a variable
    RELEASE_BODY=$(<"$RELEASE_NOTES")

    RELEASE_BODY_JSON=$(printf '%s' "$RELEASE_BODY" | jq -s -R .)

# Use a heredoc to provide the JSON data directly
    RELEASE_RESPONSE=$(curl -H "Authorization: token $GITHUB_TOKEN" -X POST "https://api.github.com/repos/$REPO_OWNER/$repo_name/releases" -d @- <<EOF
{
    "tag_name": "$version",
    "target_commitish": "main",
    "name": "Release $version",
    "body": $RELEASE_BODY_JSON,
    "draft": false,
    "prerelease": true
}
EOF
)
    win.log "$RELEASE_RESPONSE"
    # Extract the release ID from the response
    RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')

    # Upload the zip file as an asset
    ASSET_UPLOAD_RESPONSE=$(curl -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/zip" --data-binary @"$zone_build.zip" "https://uploads.github.com/repos/$REPO_OWNER/$repo_name/releases/$RELEASE_ID/assets?name=bullbitcoin-mobile.$version.zip")

    win.log "$ASSET_UPLOAD_RESPONSE"

}

