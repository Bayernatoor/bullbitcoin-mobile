#!/bin/bash

function main.keys {
    local key_props="$BBM_HOME/android/key.properties"
    local keytool_status=0 
    local pgp_status=0

    # Check if key properties file exists
    if [ -e "$key_props" ]; then
        keytool_status=1
    fi

    # Check if GPG_KEY_ID is set in the .env file
    if grep -q "GPG_KEY_ID=" "$BBM_OP_ENV"; then
        pgp_status=1
    fi

    # Log the status of the keys to the user
    [ $keytool_status -eq 1 ] && win.log "Keytool keys are set." || err.log "Keytool keys are NOT set."
    [ $pgp_status -eq 1 ] && win.log "GPG keys are set." || err.log "GPG keys are NOT set."

    # Ask the user which key they want to update
    echo "Select the key to update:"
    echo "1) Update keytool keys"
    echo "2) Update GPG keys"
    echo "3) Exit"
    
    local user_choice
    user_choice=$(input.form "Enter your choice [1-3]: ")

    case $user_choice in
        "1") keytool.keys ;;
        "2") pgp.keys ;;
        "3") exit 0 ;;
        *) err.log "Invalid selection." && main.keys ;;  # Recursive call on invalid input
    esac
}

function keytool.keys {
    local key_password
    local store_password
    local key_props
    key_props="$BBM_HOME/android/key.properties"

    if [ -e "$key_props" ]; then
        echo "Keys have been set"
        return 0
    fi

    while true; do
        key_password=$(secret.form "Enter Key Password:")
        key_password_repeat=$(secret.form "---Repeat Password:")
        if pass.verify.keys "$key_password" "$key_password_repeat"; then
            break
        fi
    done

    while true; do
        store_password=$(secret.form "Enter Store Password:")
        store_password_repeat=$(secret.form "---Repeat Password:")
        if pass.verify.keys "$store_password" "$store_password_repeat"; then
            break
        fi
    done
    br.log

    key_path=$(input.form "Directory to create/read keystore: ")
    br.log
    key_alias=$(input.form "Name of keystore file: ")

    mkdir -p "$key_path" || { echo "Failed to create directory"; exit 1; }
    
    # Generate the key store
    keytool -genkey -v \
        -keystore "$key_path/$key_alias.jks" \
        -keyalg RSA \
        -alias "$key_alias" \
        -keysize 2048 \
        -validity 10000 \
        -storepass "$store_password" \
        -keypass "$key_password" \
        -dname "CN=, OU=, O=, L=, S=, C="  # You should replace this with actual information

    # Export the certificate
    keytool -export -rfc \
        -keystore "$key_path/$key_alias.jks" \
        -alias "$key_alias" \
        -file "$key_path/bullwallet_certificate.pem" \
        -storepass "$store_password"

    # Check if the key store was created successfully
    if [ $? -eq 0 ]; then
        # Create or overwrite key properties file
        {
            echo "storePassword=$store_password"
            echo "keyPassword=$key_password"
            echo "keyAlias=$key_alias"
            echo "storeFile=$key_path/$key_alias.jks"
        } > "$key_props"
    else
        echo "An error occurred while creating the keystore."
        exit 1
    fi
}

function pgp.keys {
    local existing_keys
    local use_existing
    local gpg_key_id

    if [[ -n $GPG_KEY_ID ]]; then
        notice.log "A GPG key is already linked: $GPG_KEY_ID"
        if ! confirm.log "Do you want to proceed with a new key?"; then
            # User chose not to proceed
            exit 0;
        fi
    fi

    notice.log "Checking for existing GPG keys..."
    existing_keys=$(gpg --list-secret-keys --keyid-format=long | grep '^sec' | awk '{print $2}' | cut -d'/' -f2)

    if [[ -n $existing_keys ]]; then
        win.log "You have existing GPG keys:"
        win.log "$existing_keys"
        
        # Ask user if they want to use one of the existing keys
        use_existing=$(input.form "Do you want to use any of the above keys? (y/N): ")
        if [[ $use_existing =~ ^[Yy]$ ]]; then
            gpg_key_id=$(input.form "Enter the key ID you want to use: ")
        else
            # User chose to create a new key
            gpg_key_id=$(new.pgp.keys)
        fi
    else
        notice.log "No existing GPG keys were found. Creating a new one..."
        gpg_key_id=$(new.pgp.keys)
    fi

    notice.log "GPG Key ID: $gpg_key_id"


    # Check and replace GPG_KEY_ID in the .env file or add if it doesn't exist
    if grep -q "GPG_KEY_ID=" "$BBM_OP_ENV"; then
        # If GPG_KEY_ID exists, replace it. Using eval to properly handle the command string with spaces
        eval "$SED_COMPAT"' "s/^GPG_KEY_ID=.*/GPG_KEY_ID='"$gpg_key_id"'/" '"$BBM_OP_ENV"
    else
        # If GPG_KEY_ID does not exist, add it
        echo "GPG_KEY_ID=$gpg_key_id" >> "$BBM_OP_ENV"
    fi


    # Configure git to use this GPG key
    git config --global user.signingkey "$gpg_key_id"
    git config --global commit.gpgSign true

    win.log "GPG key configuration is complete. Add the public GPG key to your GitHub account."
}

function new.pgp.keys {
    # Instructions to create a new GPG key
    local email
    local new_key
    gpg --default-new-key-algo rsa4096 --gen-key

    email=$(input.form "Please enter the email you used for the key:")

    # Retrieving the key ID for the newly generated key
    new_key=$(gpg --list-secret-keys --keyid-format=long | grep -B 1 "$email" | head -n 1 | awk '{print $2}' | cut -d'/' -f2)

    # Exporting the new GPG key
    gpg --armor --export "$new_key"
    win.log "$new_key"
}

function env.keys {
    local KEY_ALIAS
    local KEY_PATH
    local GPG_KEY_ID

    touch "$BBM_OP_ENV"

    notice.log "Please provide the following information:"
    KEY_ALIAS=$(input.form "Enter Keytool Key Alias: ")
    KEY_PATH=$(input.form "Enter Keytool Keystore Path (absolute path): ")

    {
        echo "KEY_ALIAS=$KEY_ALIAS"
        echo "KEY_PATH=$KEY_PATH"
    } >> "$BBM_OP_ENV"

    echo "Configuration has been saved."
}

function pass.verify.keys {
    if [ "$1" != "$2" ]; then
        err.log "Passwords do not match. Please try again."
        return 1
    fi
    return 0
}

function rm.keytool.keys {
    local store_password
    store_password=$1

    keytool -delete -alias "$KEY_ALIAS" -keystore "$KEY_PATH/$KEY_ALIAS.jks" \
        -storepass "$store_password"
}

